/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.33.0
 * Product:       sht3x
 * Model-Version: 1.0.0
 */
/*
 * Copyright (c) 2023, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <Arduino.h>
#include <SensirionI2cSht3x.h>
#include "SparkFun_SGP30_Arduino_Library.h" // Click here to get the library: http://librarymanager/All#SparkFun_SGP30
#include <GyverOLED.h>
#include <Wire.h>

SensirionI2cSht3x sensor_sht;
SGP30 sensor_sgp30; //create an object of the SGP30 class
GyverOLED<SSH1106_128x64> oled;
char Lorem_ipsum[] = "CIAO";

static char errorMessage[64];
static int16_t error;

void setup() {
    bool errorFound = false;
    oled.init();              // инициализация

    Serial.begin(9600);
    while (!Serial) {
        delay(100);
    }
    Wire.begin();

    //Initialize sensor
    if (sensor_sgp30.begin() == true) {
      Serial.println("SGP30 Detected.");  
      //Initializes sensor for air quality readings
      //measureAirQuality should be called in one second increments after a call to initAirQuality
      sensor_sgp30.initAirQuality();
    } else {
      Serial.println("No SGP30 Detected. Check connections.");
      errorFound = true;
    }

    // Initialize sht
    sensor_sht.begin(Wire, SHT30_I2C_ADDR_44);

    sensor_sht.stopMeasurement();
    delay(1);
    sensor_sht.softReset();
    delay(100);
    uint16_t aStatusRegister = 0u;
    error = sensor_sht.readStatusRegister(aStatusRegister);
    if (error == NO_ERROR) 
        Serial.println("SHT3x Detected.");
    else {
        Serial.print("Error trying to execute readStatusRegister(): ");
        errorToString(error, errorMessage, sizeof errorMessage);
        Serial.println(errorMessage);
        errorFound = true;
    }
    Serial.print("aStatusRegister: ");
    Serial.print(aStatusRegister);
    Serial.println();

}

void loop() {

    float aTemperature = 0.0;
    float aHumidity = 0.0;
    error = sensor_sht.measureSingleShot(REPEATABILITY_MEDIUM, false, aTemperature,
                                     aHumidity);
    if (error != NO_ERROR) {
        Serial.print("Error trying to execute measureSingleShot(): ");
        errorToString(error, errorMessage, sizeof errorMessage);
        Serial.println(errorMessage);
        return;
    }
    //delay(2000); //Wait 1 second
//  oled.clear();
//  oled.home();
    Serial.print("aTemperature: ");
    Serial.print(aTemperature);
    Serial.print("\t");
    Serial.print("aHumidity: ");
    Serial.print(aHumidity);
    Serial.println();
    sensor_sgp30.measureAirQuality();
    Serial.print("CO2: ");
    Serial.print(sensor_sgp30.CO2);
    Serial.print(" ppm\tTVOC: ");
    Serial.print(sensor_sgp30.TVOC);
    Serial.println(" ppb");
    Serial.println();
    Serial.println();
    // oled.print("Temp.: ");
    // oled.println(aTemperature);
    // oled.print("Hum.: ");
    // oled.println(aHumidity);
    // oled.print("CO2: ");
    // oled.print(sensor_sgp30.CO2);
    // oled.println(" ppm");
    // oled.print("TVOC: ");
    // oled.print(sensor_sgp30.TVOC);
    // oled.println(" ppb");
    oled.clear();
    oled.home();
    oled.setScale(1);
    oled.autoPrintln(true);
    oled.print("Temp: ");
    oled.println(aTemperature);
    oled.print("Hum:  ");
    oled.println(aHumidity);
    oled.print("CO2:  ");
    oled.print(sensor_sgp30.CO2);
    oled.println(" ppm");
    oled.print("TVOC: ");
    oled.print(sensor_sgp30.TVOC);
    oled.println(" ppb");
    oled.update();
    delay(5000);

}

void showText() {
  oled.clear();
  oled.home();
  oled.setScale(1);
  oled.autoPrintln(true);
  oled.print(Lorem_ipsum);
  oled.update();
  delay(5000);
}